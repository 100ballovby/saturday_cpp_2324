#include <iostream>
#include <vector>
using namespace std;  // подключаю ВСЕ функции из пространства std в свой проект


int vector_basics_main() {
    /* Вектор - структура, которая является моделью динамического массива, который лишен всех проблем  */
    // объявление вектора
    vector <int> numbers;
    // инициализация векторов
    vector <string> words = {"Hello", "Salute", "Hola"};
    // обращение к векторам вариант 1
    cout << words[1] << endl;  // обращение через индекс работает так же, как в массивах
    cout << words.at(0) << endl;  // обращение через функцию at (получает в себя индекс)

    // размерность вектора обычно не указывается
    vector <int> vector_first(5);  // первоначальная длина вектора - 5 ячеек
    // есть второй вариант указания количества ячеек
    vector <int> vector_second;  // создал вектор
    vector_second.reserve(5);  // указал число ячеек первоначальной длины

    cout << "Elements of the first vector: ";
    for (int i = 0; i < 3; i++) {
        cout << vector_first[i] << " ";
    }
    cout << "\nElements of the second vector: ";
    for (int i = 0; i < 3; i++) {
        cout << vector_second[i] << " ";
    }
    /* При объявлении чего-либо (массива, вектора, переменной и пр.) мы выделяем
     * определенное количество ячеек памяти, в которых уже хранится ненужный для
     * системы (компьютера) мусор. В нашем случае мусором могут являться числа.
     * Поэтому при введении второго вектора, в нем уже находились какие-то рандомные числа.
     *
     * Важно помнить, что при использовании второго способа указания длины вектора есть
     * один плюс - время. Потому что в первом способе компилятор тратит время на
     * заполнение вектора нулями, во втором случае он просто берет все доступныые ячейки.
     * */
    return 0;
}


